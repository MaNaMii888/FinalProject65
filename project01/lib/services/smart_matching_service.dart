import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/foundation.dart';
import 'package:project01/models/post.dart';
import 'package:project01/services/notifications_service.dart';

/// Smart Matching Service for Post Similarity Detection
/// ‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á Hybrid: Background Processing + Smart Caching
class SmartMatchingService {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  // ‡πÄ‡∏Å‡πá‡∏ö cache ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
  static final Map<String, UserMatchingProfile> _userProfileCache = {};

  /// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà
  static Future<void> processNewPost(Map<String, dynamic> newPostData) async {
    try {
      final currentUserId = FirebaseAuth.instance.currentUser?.uid;
      if (currentUserId == null) return;

      debugPrint('üîç Processing new post for matching...');

      // 1. ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô Post object
      final newPost = Post.fromJson({...newPostData, 'id': 'temp'});

      // 2. ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏™‡∏ô‡πÉ‡∏à (‡πÅ‡∏ö‡∏ö batch)
      await _findPotentialMatches(newPost, currentUserId);
    } catch (e) {
      debugPrint('‚ùå Error in processNewPost: $e');
    }
  }

  /// ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏™‡∏ô‡πÉ‡∏à‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà
  static Future<void> _findPotentialMatches(
    Post newPost,
    String excludeUserId,
  ) async {
    try {
      // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£ match ‡∏•‡∏á collection ‡∏û‡∏¥‡πÄ‡∏®‡∏©
      final matchingData = {
        'postId': newPost.id,
        'postUserId': excludeUserId,
        'postTitle': newPost.title,
        'postCategory': newPost.category,
        'postBuilding': newPost.building,
        'postType': newPost.isLostItem ? 'lost' : 'found',
        'searchableText':
            '${newPost.title} ${newPost.description}'.toLowerCase(),
        'createdAt': FieldValue.serverTimestamp(),
        'processed': false, // ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏ï‡∏≠‡∏ô background processing
      };

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á "post_matching_queue" ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á
      await _firestore.collection('post_matching_queue').add(matchingData);

      // === ‡∏Å‡∏≤‡∏£‡πÅ‡∏°‡∏ä‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏á‡∏ó‡∏≤‡∏á ===

      // 1. ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏™‡∏ô‡πÉ‡∏à‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ô‡∏µ‡πâ (‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°)
      await _processImmediateMatching(newPost, excludeUserId);

      // 2. ‡∏´‡∏≤‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß (‡πÉ‡∏´‡∏°‡πà!)
      await _checkExistingOppositePosts(newPost, excludeUserId);
    } catch (e) {
      debugPrint('‚ùå Error in _findPotentialMatches: $e');
    }
  }

  /// ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà active
  static Future<void> _processImmediateMatching(
    Post newPost,
    String excludeUserId,
  ) async {
    try {
      // ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏û‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤
      final oneHourAgo = DateTime.now().subtract(const Duration(hours: 1));

      final activeUsers =
          await _firestore
              .collection('user_activity')
              .where(
                'lastActive',
                isGreaterThan: Timestamp.fromDate(oneHourAgo),
              )
              .where('userId', isNotEqualTo: excludeUserId)
              .limit(20) // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
              .get();

      for (var userDoc in activeUsers.docs) {
        final userId = userDoc.data()['userId'] as String;
        await _checkUserPostMatch(userId, newPost);
      }
    } catch (e) {
      debugPrint('‚ùå Error in _processImmediateMatching: $e');
    }
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
  static Future<void> _checkExistingOppositePosts(
    Post newPost,
    String excludeUserId,
  ) async {
    try {
      debugPrint('üîç Checking existing opposite posts...');

      // ‡∏´‡∏≤‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°
      // ‡∏ñ‡πâ‡∏≤‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô "‡∏´‡∏≤‡∏Ç‡∏≠‡∏á" (lost) ‚Üí ‡∏´‡∏≤‡πÉ‡∏ô "‡∏û‡∏ö‡∏Ç‡∏≠‡∏á" (found)
      // ‡∏ñ‡πâ‡∏≤‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô "‡∏û‡∏ö‡∏Ç‡∏≠‡∏á" (found) ‚Üí ‡∏´‡∏≤‡πÉ‡∏ô "‡∏´‡∏≤‡∏Ç‡∏≠‡∏á" (lost)
      final oppositeType = !newPost.isLostItem;

      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
      Query query = _firestore
          .collection('lost_found_items')
          .where('isLostItem', isEqualTo: oppositeType)
          .where('userId', isNotEqualTo: excludeUserId)
          .where('status', isEqualTo: 'active'); // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
      if (newPost.category.isNotEmpty) {
        query = query.where('category', isEqualTo: newPost.category);
      }

      final snapshot =
          await query
              .orderBy('createdAt', descending: true)
              .limit(50) // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
              .get();

      final oppositePosts =
          snapshot.docs
              .map(
                (doc) => Post.fromJson({
                  ...doc.data() as Map<String, dynamic>,
                  'id': doc.id,
                }),
              )
              .toList();

      debugPrint('üìä Found ${oppositePosts.length} opposite posts to check');

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏û‡∏™‡∏ï‡πå
      for (var oppositePost in oppositePosts) {
        await _checkPostCompatibility(newPost, oppositePost, excludeUserId);
      }
    } catch (e) {
      debugPrint('‚ùå Error in _checkExistingOppositePosts: $e');
    }
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà‡∏Å‡∏±‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
  static Future<void> _checkPostCompatibility(
    Post newPost,
    Post existingPost,
    String newPostUserId,
  ) async {
    try {
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Ñ‡∏•‡∏∂‡∏á
      final matchScore = _calculatePostSimilarity(existingPost, newPost);

      debugPrint(
        'üéØ Match score between "${newPost.title}" and "${existingPost.title}": ${(matchScore * 100).round()}%',
      );

      // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏û‡∏≠
      if (matchScore > 0.7) {
        // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏î‡∏¥‡∏°
        await _sendMatchNotification(
          userId: existingPost.userId,
          newPost: newPost,
          matchingPost: existingPost,
          matchScore: matchScore,
        );

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏°‡∏ä‡∏•‡∏á‡πÉ‡∏ô Firebase ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏ß‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
        await _saveMatchRecord(newPost, existingPost, matchScore);
      }
    } catch (e) {
      debugPrint('‚ùå Error in _checkPostCompatibility: $e');
    }
  }

  /// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏°‡∏ä
  static Future<void> _saveMatchRecord(
    Post newPost,
    Post existingPost,
    double matchScore,
  ) async {
    try {
      await _firestore.collection('post_matches').add({
        'newPostId': newPost.id,
        'newPostUserId': newPost.userId,
        'newPostTitle': newPost.title,
        'newPostType': newPost.isLostItem ? 'lost' : 'found',
        'existingPostId': existingPost.id,
        'existingPostUserId': existingPost.userId,
        'existingPostTitle': existingPost.title,
        'existingPostType': existingPost.isLostItem ? 'lost' : 'found',
        'matchScore': matchScore,
        'createdAt': FieldValue.serverTimestamp(),
        'status': 'pending', // pending, contacted, resolved
      });

      debugPrint('‚úÖ Saved match record: ${(matchScore * 100).round()}%');
    } catch (e) {
      debugPrint('‚ùå Error saving match record: $e');
    }
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà
  static Future<void> _checkUserPostMatch(String userId, Post newPost) async {
    try {
      // ‡∏´‡∏≤ profile ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡πÉ‡∏ä‡πâ cache ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      UserMatchingProfile? profile = _userProfileCache[userId];

      if (profile == null) {
        profile = await _getUserMatchingProfile(userId);
        _userProfileCache[userId] = profile;
      }

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì match score
      double bestMatchScore = 0.0;
      Post? bestMatchPost;

      for (var userPost in profile.userPosts) {
        double score = _calculatePostSimilarity(userPost, newPost);
        if (score > bestMatchScore) {
          bestMatchScore = score;
          bestMatchPost = userPost;
        }
      }

      // ‡∏™‡πà‡∏á notification ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ threshold
      if (bestMatchScore > 0.7 && bestMatchPost != null) {
        await _sendMatchNotification(
          userId: userId,
          newPost: newPost,
          matchingPost: bestMatchPost,
          matchScore: bestMatchScore,
        );
      }
    } catch (e) {
      debugPrint('‚ùå Error in _checkUserPostMatch: $e');
    }
  }

  /// ‡∏î‡∏∂‡∏á profile ‡∏Å‡∏≤‡∏£ match ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  static Future<UserMatchingProfile> _getUserMatchingProfile(
    String userId,
  ) async {
    try {
      final userPosts =
          await _firestore
              .collection('lost_found_items')
              .where('userId', isEqualTo: userId)
              .orderBy('createdAt', descending: true)
              .limit(50) // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
              .get();

      final posts =
          userPosts.docs
              .map((doc) => Post.fromJson({...doc.data(), 'id': doc.id}))
              .toList();

      return UserMatchingProfile(
        userId: userId,
        userPosts: posts,
        lastUpdated: DateTime.now(),
      );
    } catch (e) {
      debugPrint('‚ùå Error getting user profile: $e');
      return UserMatchingProfile(
        userId: userId,
        userPosts: [],
        lastUpdated: DateTime.now(),
      );
    }
  }

  /// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Ñ‡∏•‡∏∂‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå
  static double _calculatePostSimilarity(Post userPost, Post newPost) {
    double score = 0.0;

    // 1. ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏° (Lost vs Found) - 40%
    if (userPost.isLostItem != newPost.isLostItem) {
      score += 0.4;
    }

    // 2. ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô - 25%
    if (userPost.category == newPost.category) {
      score += 0.25;
    }

    // 3. ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô - 20%
    if (userPost.building == newPost.building) {
      score += 0.2;
    }

    // 4. ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Ñ‡∏•‡∏∂‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥ - 15%
    double textSimilarity = _calculateTextSimilarity(
      '${userPost.title} ${userPost.description}',
      '${newPost.title} ${newPost.description}',
    );
    score += textSimilarity * 0.15;

    return score;
  }

  /// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Ñ‡∏•‡∏∂‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  static double _calculateTextSimilarity(String text1, String text2) {
    if (text1.isEmpty || text2.isEmpty) return 0.0;

    List<String> words1 = _extractKeywords(text1);
    List<String> words2 = _extractKeywords(text2);

    if (words1.isEmpty || words2.isEmpty) return 0.0;

    int commonWords = 0;
    for (String word1 in words1) {
      for (String word2 in words2) {
        if (word1.toLowerCase() == word2.toLowerCase()) {
          commonWords++;
          break;
        }
      }
    }

    int totalUniqueWords = words1.toSet().union(words2.toSet()).length;
    return totalUniqueWords > 0 ? commonWords / totalUniqueWords : 0.0;
  }

  /// ‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
  static List<String> _extractKeywords(String text) {
    return text
        .toLowerCase()
        .split(RegExp(r'[\s,.-]+'))
        .where((word) => word.length > 2)
        .toList();
  }

  /// ‡∏™‡πà‡∏á notification ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏ö match
  static Future<void> _sendMatchNotification({
    required String userId,
    required Post newPost,
    required Post matchingPost,
    required double matchScore,
  }) async {
    try {
      final matchPercentage = (matchScore * 100).round();

      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏°‡∏ä
      String title, message;

      if (newPost.isLostItem && !matchingPost.isLostItem) {
        // ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà = ‡∏´‡∏≤‡∏Ç‡∏≠‡∏á, ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏î‡∏¥‡∏° = ‡∏û‡∏ö‡∏Ç‡∏≠‡∏á
        title = 'üîç ‡∏°‡∏µ‡∏Ñ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏û‡∏ö!';
        message =
            '‡∏Ñ‡∏ô${newPost.userName}‡∏´‡∏≤ "${newPost.title}" ‡∏ã‡∏∂‡πà‡∏á‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏û‡∏ö - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏£‡∏á $matchPercentage%';
      } else if (!newPost.isLostItem && matchingPost.isLostItem) {
        // ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà = ‡∏û‡∏ö‡∏Ç‡∏≠‡∏á, ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏î‡∏¥‡∏° = ‡∏´‡∏≤‡∏Ç‡∏≠‡∏á
        title = 'üéØ ‡∏°‡∏µ‡∏Ñ‡∏ô‡∏û‡∏ö‡∏™‡∏¥‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏´‡∏≤!';
        message =
            '‡∏Ñ‡∏ô${newPost.userName}‡∏û‡∏ö "${newPost.title}" ‡∏ã‡∏∂‡πà‡∏á‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏´‡∏≤ - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏£‡∏á $matchPercentage%';
      } else {
        // ‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÜ (‡πÑ‡∏°‡πà‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô)
        title = 'üéØ ‡∏û‡∏ö‡∏™‡∏¥‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á';
        message = '${newPost.title} - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏£‡∏á $matchPercentage%';
      }

      final notification = NotificationModel(
        id: '',
        userId: userId,
        title: title,
        message: message,
        type: 'smart_match',
        data: {
          'newPostId': newPost.id,
          'matchingPostId': matchingPost.id,
          'matchScore': matchScore,
          'newPostTitle': newPost.title,
          'matchingPostTitle': matchingPost.title,
          'newPostType': newPost.isLostItem ? 'lost' : 'found',
          'matchingPostType': matchingPost.isLostItem ? 'lost' : 'found',
          'newPostUserName': newPost.userName,
          'newPostContact': newPost.contact,
        },
        createdAt: DateTime.now(),
      );

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Firebase
      await NotificationService.saveNotificationToFirestore(notification);

      // ‡∏™‡πà‡∏á local notification ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÅ‡∏≠‡∏û
      await NotificationService.showLocalNotification(
        id: DateTime.now().millisecondsSinceEpoch,
        title: notification.title,
        body: notification.message,
        payload: 'smart_match_${newPost.id}',
      );

      debugPrint('‚úÖ Sent smart match notification to user $userId');
    } catch (e) {
      debugPrint('‚ùå Error sending notification: $e');
    }
  }

  /// ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó user activity (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏û)
  static Future<void> updateUserActivity(String userId) async {
    try {
      await _firestore.collection('user_activity').doc(userId).set({
        'userId': userId,
        'lastActive': FieldValue.serverTimestamp(),
      }, SetOptions(merge: true));
    } catch (e) {
      debugPrint('‚ùå Error updating user activity: $e');
    }
  }

  /// ‡∏•‡πâ‡∏≤‡∏á cache (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
  static void clearCache() {
    _userProfileCache.clear();
  }

  /// Background processing ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
  /// (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏î‡πâ‡∏ß‡∏¢ Timer ‡∏´‡∏£‡∏∑‡∏≠ Firebase Functions)
  static Future<void> processQueuedMatches() async {
    try {
      final unprocessedPosts =
          await _firestore
              .collection('post_matching_queue')
              .where('processed', isEqualTo: false)
              .orderBy('createdAt')
              .limit(10)
              .get();

      for (var doc in unprocessedPosts.docs) {
        final data = doc.data();

        // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ö‡∏ö comprehensive
        await _processComprehensiveMatching(data);

        // ‡∏°‡∏≤‡∏£‡πå‡∏Ñ‡∏ß‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß
        await doc.reference.update({'processed': true});
      }
    } catch (e) {
      debugPrint('‚ùå Error in processQueuedMatches: $e');
    }
  }

  /// ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏° (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö background)
  static Future<void> _processComprehensiveMatching(
    Map<String, dynamic> postData,
  ) async {
    // TODO: ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö background processing
    // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ ML ‡∏´‡∏£‡∏∑‡∏≠ advanced algorithms ‡πÑ‡∏î‡πâ
    debugPrint(
      'üîÑ Processing comprehensive matching for ${postData['postTitle']}',
    );
  }
}

/// Model ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user matching profile
class UserMatchingProfile {
  final String userId;
  final List<Post> userPosts;
  final DateTime lastUpdated;

  UserMatchingProfile({
    required this.userId,
    required this.userPosts,
    required this.lastUpdated,
  });

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ cache ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á (30 ‡∏ô‡∏≤‡∏ó‡∏µ)
  bool get isExpired {
    return DateTime.now().difference(lastUpdated).inMinutes > 30;
  }
}
